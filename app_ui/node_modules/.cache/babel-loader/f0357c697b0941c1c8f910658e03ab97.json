{"ast":null,"code":"import _classCallCheck from \"/Users/shalini/Documents/SU_Courses/Sem3/CIS-600-Blockchain/Project/code/answeritapp/appui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/shalini/Documents/SU_Courses/Sem3/CIS-600-Blockchain/Project/code/answeritapp/appui/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shalini/Documents/SU_Courses/Sem3/CIS-600-Blockchain/Project/code/answeritapp/appui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shalini/Documents/SU_Courses/Sem3/CIS-600-Blockchain/Project/code/answeritapp/appui/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/shalini/Documents/SU_Courses/Sem3/CIS-600-Blockchain/Project/code/answeritapp/appui/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/shalini/Documents/SU_Courses/Sem3/CIS-600-Blockchain/Project/code/answeritapp/appui/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css'; // import { answerItContract } from \"./setup\";\n\nimport Header from './header';\nimport Posts from \"./posts\";\nimport TruffleContract from 'truffle-contract';\nimport PostQuestion from \"./postquestion\";\nimport Web3 from 'web3';\nimport AnswerIT from '../../backend/build/contracts/AnswerIT.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.postAnswer = function (id, answer) {\n      console.log(id, answer);\n\n      _this.contracts.PostAnswer(id, answer, {\n        from: _this.state.account,\n        gas: 3000000\n      });\n\n      _this.getQuestions();\n    };\n\n    _this.postQuestion = function (question) {\n      console.log(question, _this.state.account);\n\n      _this.contracts.PostQuestion(question, {\n        from: _this.state.account,\n        gas: 3000000\n      });\n\n      _this.getQuestions(); // console.log(this.contracts.msgCount().resolve)\n      // console.log(this.contracts.Messages(7),\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")\n\n    };\n\n    _this.getQuestions = function () {\n      var self = _assertThisInitialized(_assertThisInitialized(_this));\n\n      self.state.contracts.msgCount().then(function (msgCount) {\n        console.log(msgCount.toNumber());\n        var questions = [];\n\n        for (var i = 0; i < msgCount.toNumber(); i++) {\n          console.log(\"here\");\n          self.state.contracts.Messages(i).then(function (q) {\n            var numAnswers = q[11].toNumber();\n            var id = q[1].toNumber();\n            var allAnswers = [];\n            console.log(numAnswers, \"----------======\");\n\n            if (numAnswers == 0) {\n              q.push(allAnswers);\n              questions.push(q);\n              self.setState({\n                questions: questions\n              });\n            } else {\n              var _loop = function _loop(j) {\n                answers = [];\n                upvoteCounts = [];\n                upvoteValues = [];\n                self.state.contracts.IterateAnswers(id, j).then(function (answer) {\n                  answers.push(answer);\n                  self.state.contracts.GetUpvoteCount(id, j).then(function (upvoteCount) {\n                    upvoteCounts.push(upvoteCount);\n                    self.state.contracts.GetUpvoteValue(id, j).then(function (upvoteValue) {\n                      upvoteValues.push(upvoteValue);\n\n                      for (var x = 0; x < numAnswers; x++) {\n                        allAnswers.push([answers[x], upvoteCounts[x], upvoteValues[x]]);\n                      }\n\n                      if (j == numAnswers - 1) {\n                        q.push(allAnswers);\n                        questions.push(q);\n                        self.setState({\n                          questions: questions\n                        });\n                      }\n                    });\n                  });\n                });\n              };\n\n              for (var j = 0; j < numAnswers; j++) {\n                var answers;\n                var upvoteCounts;\n                var upvoteValues;\n\n                _loop(j);\n              }\n            }\n          });\n        }\n      });\n    };\n\n    _this.componentDidMount = function () {\n      _this.web3.eth.getCoinbase(function (err, acc) {\n        console.log(\"acc\", acc);\n\n        _this.setState({\n          account: acc\n        });\n\n        _this.AnswerIT.deployed().then(function (instance) {\n          _this.contracts = instance;\n\n          _this.setState({\n            contracts: _this.contracts\n          }, function () {\n            this.getQuestions();\n          });\n\n          console.log(\"App Loaded:\", _this.contracts);\n          console.log(\"App From state:\", _this.state.contracts);\n          console.log(\"Logged in addr: \", _this.state.account);\n        });\n      });\n    };\n\n    _this.render = function () {\n      console.log(_this.state.questions);\n\n      var self = _assertThisInitialized(_assertThisInitialized(_this));\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"posts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(PostQuestion, {\n        question: _this.postQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"questions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, _this.state.questions.map(function (item, i) {\n        return React.createElement(Posts, {\n          key: i,\n          question: item[2],\n          answer: item[12],\n          id: item[1].toNumber(),\n          postAnswer: self.postAnswer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        });\n      }))));\n    };\n\n    _this.state = {\n      contracts: {},\n      account: '0x0',\n      questions: [],\n      questionCount: 0 // this.handleVoting=this.handleVoting.bind(this)\n      // let web3 = window.web3;  \n      // this.web3Provider = web3.currentProvider;\n      // this.web3 = new Web3(web3.currentProvider);\n\n    };\n\n    if (typeof window.web3 === 'undefined') {\n      _this.web3Provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545');\n    } else {\n      var myWeb3 = new Web3(window.web3.currentProvider);\n      myWeb3.eth.defaultAccount = window.web3.eth.defaultAccount;\n      console.log(\"defaultAccount : \", myWeb3.eth.defaultAccount);\n      _this.web3Provider = window.web3.currentProvider;\n    } // this.web3Provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545')\n\n\n    _this.web3 = new Web3(_this.web3Provider);\n    _this.AnswerIT = TruffleContract(AnswerIT);\n\n    _this.AnswerIT.setProvider(_this.web3Provider);\n\n    return _this;\n  }\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/shalini/Documents/SU_Courses/Sem3/CIS-600-Blockchain/Project/code/answeritapp/appui/src/App.js"],"names":["React","Component","Header","Posts","TruffleContract","PostQuestion","Web3","AnswerIT","App","props","postAnswer","id","answer","console","log","contracts","PostAnswer","from","state","account","gas","getQuestions","postQuestion","question","self","msgCount","then","toNumber","questions","i","Messages","q","numAnswers","allAnswers","push","setState","j","answers","upvoteCounts","upvoteValues","IterateAnswers","GetUpvoteCount","upvoteCount","GetUpvoteValue","upvoteValue","x","componentDidMount","web3","eth","getCoinbase","err","acc","deployed","instance","render","map","item","questionCount","window","web3Provider","providers","HttpProvider","myWeb3","currentProvider","defaultAccount","setProvider"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import { answerItContract } from \"./setup\";\nimport Header from './header';\nimport Posts from \"./posts\";\nimport TruffleContract from 'truffle-contract'\nimport PostQuestion from \"./postquestion\";\nimport Web3 from 'web3';\nimport AnswerIT from '../../backend/build/contracts/AnswerIT.json'; \n\nclass App extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            contracts : {},\n            account : '0x0',\n            questions : [],\n            questionCount : 0\n        }\n        // this.handleVoting=this.handleVoting.bind(this)\n        // let web3 = window.web3;  \n\n        // this.web3Provider = web3.currentProvider;\n        // this.web3 = new Web3(web3.currentProvider);\n\n        if (typeof window.web3 === 'undefined') {\n            this.web3Provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545');\n        } else {\n            var myWeb3 = new Web3(window.web3.currentProvider); \n            myWeb3.eth.defaultAccount = window.web3.eth.defaultAccount;\n\n           console.log(\"defaultAccount : \",  myWeb3.eth.defaultAccount);\n           this.web3Provider = window.web3.currentProvider;\n        }\n\n    // this.web3Provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545')\n        this.web3 = new Web3(this.web3Provider)\n        this.AnswerIT = TruffleContract(AnswerIT)\n        this.AnswerIT.setProvider(this.web3Provider)\n\n\n    }\n\n    postAnswer = (id, answer) => {\n        console.log(id, answer);\n        this.contracts.PostAnswer(id, answer, { from: this.state.account, gas:3000000 })\n        this.getQuestions();\n    }\n\n    postQuestion = (question) => {\n        console.log(question, this.state.account)\n        this.contracts.PostQuestion(question,  { from: this.state.account, gas:3000000 });\n        this.getQuestions();\n        // console.log(this.contracts.msgCount().resolve)\n        // console.log(this.contracts.Messages(7),\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")\n    }\n\n    getQuestions = () => {\n        var self = this;\n        self.state.contracts.msgCount().then(function(msgCount){\n            console.log(msgCount.toNumber())\n\n            var questions = [];\n\n            for (var i = 0; i < msgCount.toNumber(); i++) {\n                console.log(\"here\")\n                self.state.contracts.Messages(i).then(function(q){\n                    var numAnswers = q[11].toNumber();\n                    var id = q[1].toNumber();\n                    var allAnswers = [];\n                    console.log(numAnswers, \"----------======\")\n                    if(numAnswers == 0) {\n                        q.push(allAnswers)\n                        questions.push(q);\n                        self.setState({questions:questions})\n\n                    } else {\n                        for(let j = 0; j < numAnswers; j++) {\n                            var answers = [];\n                            var upvoteCounts = [];\n                            var upvoteValues = [];\n\n                            self.state.contracts.IterateAnswers(id, j).then(function(answer){\n                                answers.push(answer);\n                                self.state.contracts.GetUpvoteCount(id,j).then(function(upvoteCount) {\n                                    upvoteCounts.push(upvoteCount);\n                                    self.state.contracts.GetUpvoteValue(id,j).then(function(upvoteValue){\n                                        upvoteValues.push(upvoteValue);\n\n                                        for(let x = 0; x < numAnswers; x++) {\n                                            allAnswers.push([answers[x], upvoteCounts[x], upvoteValues[x]])\n                                        }\n                                        if(j == numAnswers - 1){\n                                            q.push(allAnswers);\n                                            questions.push(q);\n                                            self.setState({questions:questions})\n                                        }\n                                    })\n                                })\n                            })\n                        }\n                    }\n\n                })\n            }\n        })\n\n\n    }\n\n    componentDidMount = () => {\n        this.web3.eth.getCoinbase((err, acc)=>{\n            console.log(\"acc\", acc);\n            this.setState({account : acc});\n            this.AnswerIT.deployed().then((instance) => {\n                this.contracts = instance;\n                this.setState({contracts : this.contracts}, function(){\n                    this.getQuestions();\n                })\n                console.log(\"App Loaded:\",this.contracts);\n                console.log(\"App From state:\",this.state.contracts);\n                console.log(\"Logged in addr: \" , this.state.account);\n            })\n        });\n    }\n\n\n\n    render = () => {\n        console.log(this.state.questions)\n        var self = this;\n        return (\n            <div className=\"App\">\n                <Header />\n                <div className=\"posts\">\n                    <PostQuestion question={this.postQuestion}/>\n                    <div className=\"questions\">\n                    { this.state.questions.map(function(item, i){\n                        return <Posts key={i} question={item[2]} answer={item[12]} id= {item[1].toNumber()} postAnswer={self.postAnswer}/>\n                        })\n                    }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}